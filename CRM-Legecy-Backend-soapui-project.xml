<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="c844d6a4-3fb5-46c9-9323-1bf2732eca3d" activeEnvironment="Default" name="CRM Legecy Backend" resourceRoot="" soapui-version="5.4.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="aa751339-b0f2-43cf-ad63-73adb25d2d61" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://localhost:8088" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://Kalpas-MacBook-Pro.local:8089/</con:endpoint><con:endpoint>http://localhost:8088</con:endpoint></con:endpoints><con:resource name="CustomerProfile" path="/customerProfile" id="9d380b0d-35c7-4312-8285-28e32126a96b"><con:settings/><con:parameters/><con:method name="CustomerProfile 1" id="b9bce56d-124e-4ce4-9d9d-78d1c014d7b6" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="b15d45da-2585-4abd-8471-e5220201ae1d" mediaType="application/json"><con:settings/><con:endpoint>http://localhost:8088</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:restMockService id="01c41240-5edf-4e78-9938-20f725370892" port="8089" path="/" host="Kalpas-MacBook-Pro.local" name="CRMCustomerProfileMock"><con:settings/><con:properties/><con:restMockAction name="/createCustomerProfile" method="POST" resourcePath="/createCustomerProfile" id="bf6ac5f8-e2e1-4df0-ae0e-9413ac189977"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Success" id="dfff89d0-66a7-4173-b5e3-9dc9b8f0bd8a" httpResponseStatus="200"><con:settings/><con:responseContent> &lt;Response>
      &lt;status>Successful&lt;/status>
 &lt;/Response></con:responseContent></con:response><con:response name="CustomerExists" id="466c8eeb-1274-4b53-bf20-5634a3afb45b" httpResponseStatus="500"><con:settings/><con:responseContent> &lt;Error>
      &lt;Code>CRM001&lt;/Code>
 &lt;/Error></con:responseContent></con:response><con:response name="CustomerCreationFailed" id="bc17b7a4-7b0a-4650-a906-03c4736ecb4d" httpResponseStatus="500"><con:settings/><con:responseContent> &lt;Error>
      &lt;Code>CRM002&lt;/Code>
 &lt;/Error></con:responseContent></con:response></con:restMockAction><con:restMockAction name="/deleteCustomerProfile" method="POST" resourcePath="/deleteCustomerProfile" id="f93ec759-5a7b-4947-b61f-05212639902a"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Success" id="e692dc92-e310-470e-a5b6-4a95f861d910" httpResponseStatus="200"><con:settings/><con:responseContent> &lt;Response>
      &lt;status>Successful&lt;/status>
 &lt;/Response></con:responseContent></con:response><con:response name="CustomerCanNotBeFound" id="d647c9d3-719a-4919-afd7-4fa2943a2aa7" httpResponseStatus="500"><con:settings/><con:responseContent> &lt;Error>
      &lt;Code>CRM003&lt;/Code>
 &lt;/Error></con:responseContent></con:response><con:response name="CustomerDeleteFailed" id="30828fa6-7e98-49fc-a29e-bb98013cb6b2" httpResponseStatus="500"><con:settings/><con:responseContent> &lt;Error>
      &lt;Code>CRM005&lt;/Code>
 &lt;/Error></con:responseContent></con:response></con:restMockAction><con:restMockAction name="/updateCustomerProfile" method="POST" resourcePath="/updateCustomerProfile" id="7c341737-1f3a-446e-a1b1-e04db547ac15"><con:settings/><con:defaultResponse>Success</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Success" id="4704f48e-2de0-4cb8-b6a6-bdcee49a9982" httpResponseStatus="200"><con:settings/><con:responseContent> &lt;Response>
      &lt;status>Successful&lt;/status>
 &lt;/Response></con:responseContent></con:response><con:response name="CustomerCanNotBeFound" id="bc7f9093-aae0-4459-bbfb-c1fe423ce40e" httpResponseStatus="500"><con:settings/><con:responseContent> &lt;Error>
      &lt;Code>CRM003&lt;/Code>
 &lt;/Error></con:responseContent></con:response><con:response name="CustomerUpdateFailed" id="44ec41b9-a45c-47de-b2a2-974efeea5eab" httpResponseStatus="500"><con:settings/><con:responseContent> &lt;Error>
      &lt;Code>CRM004&lt;/Code>
 &lt;/Error></con:responseContent></con:response></con:restMockAction><con:restMockAction name="/readCustomerProfile" method="POST" resourcePath="/readCustomerProfile" id="3d096d52-4cd9-48ea-a6ac-8d69744aafcf"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Success" id="a960031a-a33b-4128-92ab-f47e9745b3dc" httpResponseStatus="200"><con:settings/><con:responseContent><![CDATA[<CustomerProfile>
    <CustomerIdentificationNumber>1234</CustomerIdentificationNumber>
    <FirstName>Jhone</FirstName>
    <LastName>Doe</LastName>
    <DateOfBirth>1999-01-01</DateOfBirth>
    <Addresses>
        <Address>
            <AddressType>HOME</AddressType>
            <Address>158, Pitt Street, Sydney, Australia</Address>
        </Address>
    </Addresses>
</CustomerProfile>]]></con:responseContent><con:header><con:name>x</con:name><con:value>sssss</con:value></con:header><con:header><con:name>Content-Type</con:name><con:value>application/xml</con:value></con:header></con:response><con:response name="CustomerCanNotBeFound" id="3c0a98f4-4ba9-40c0-9f7d-118608e0e437" httpResponseStatus="500"><con:settings/><con:responseContent> &lt;Error>
      &lt;Code>CRM003&lt;/Code>
 &lt;/Error></con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>